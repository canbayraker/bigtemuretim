export declare class S7Comm {
    private silentMode;
    private effectiveDebugLevel;
    private readonly writeReqHeader;
    private readonly readReqHeader;
    private readonly connectReq;
    private readonly negotiatePDU;
    private readonly maxGap;
    private readonly requestMaxParallel;
    private readonly requestMaxPDU;
    private readReq;
    private writeReq;
    private client;
    private isoConnectionState;
    private maxPDU;
    private maxParallel;
    private parallelJobsNow;
    private doNotOptimize;
    private connectCallback;
    private readonly globalTimeout;
    private connectTimeout;
    private PDUTimeout;
    private reconnectTimer;
    private lastError;
    private rack;
    private slot;
    private localTSAP;
    private remoteTSAP;
    private requestQueue;
    private sentReadPacketArray;
    private sentWritePacketArray;
    private masterSequenceNumber;
    private readRequestSequence;
    private writeRequestSequence;
    directionsTranslated: {
        [key: string]: string;
    };
    private storedAdresses;
    private translationCB;
    private ConnectionConfig;
    private connectionId;
    private connectCBIssued;
    constructor(ConnectionConfig: ConnectionConfig);
    private outputLog;
    private doNothing;
    setTranslationCB(variables: {
        [key: string]: any;
    }): void;
    private rejectAllRequestQueue;
    private stringToS7Addr;
    private stringArrayToS7AddressArray;
    private S7AddrToBuffer;
    private getWriteBuffer;
    private bufferizeValue;
    private addressListSorter;
    private itemListSorter;
    private isOptimizableArea;
    private isWaiting;
    private packetTimeout;
    private connectionReset;
    private connectError;
    private readWriteError;
    private connectionCleanup;
    private findReadIndexOfSeqNum;
    private findWriteIndexOfSeqNum;
    private validateWriteResponse;
    private validateReadResponse;
    private BufferToAddressValue;
    private checkReadResponseParts;
    private checkWriteResponseParts;
    private readResponse;
    private writeResponse;
    private checkRfcData;
    private onPDUReply;
    private onResponse;
    private onISOConnectReply;
    private onTCPConnect;
    private connectNow;
    private sendNextRequest;
    private prepareReadPacket;
    private sendReadPacket;
    private prepareWritePacket;
    private sendWritePacket;
    initiateConnection(callback?: Function): void;
    addItems(directions: string[]): Promise<void>;
    removeItems(directions: string[]): void;
    readItems(directions: string[]): Promise<any>;
    readAllItems(): Promise<any>;
    writeItems(directions: string[], value: any[]): Promise<any>;
    private get Address();
    private get S7ItemWrite();
}
export interface ConnectionConfig {
    port: number;
    host: string;
    rack?: number;
    slot?: number;
    timeout?: number;
    silentMode?: boolean;
    localTSAP?: number;
    remoteTSAP?: number;
    callback?: Function;
    connectionName?: string;
}
